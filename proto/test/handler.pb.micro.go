// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/test/handler.proto

package test

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Test service

func NewTestEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Test service

type TestService interface {
	EntityAdd(ctx context.Context, in *EntityAddReq, opts ...client.CallOption) (*EntityAddRes, error)
	EntityDel(ctx context.Context, in *EntityDelReq, opts ...client.CallOption) (*EntityDelRes, error)
	EntityUpdate(ctx context.Context, in *EntityUpdateReq, opts ...client.CallOption) (*EntityUpdateRes, error)
	EntityOne(ctx context.Context, in *EntityOneReq, opts ...client.CallOption) (*EntityOneRes, error)
	EntityPage(ctx context.Context, in *EntityPageReq, opts ...client.CallOption) (*EntityPageRes, error)
}

type testService struct {
	c    client.Client
	name string
}

func NewTestService(name string, c client.Client) TestService {
	return &testService{
		c:    c,
		name: name,
	}
}

func (c *testService) EntityAdd(ctx context.Context, in *EntityAddReq, opts ...client.CallOption) (*EntityAddRes, error) {
	req := c.c.NewRequest(c.name, "Test.EntityAdd", in)
	out := new(EntityAddRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) EntityDel(ctx context.Context, in *EntityDelReq, opts ...client.CallOption) (*EntityDelRes, error) {
	req := c.c.NewRequest(c.name, "Test.EntityDel", in)
	out := new(EntityDelRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) EntityUpdate(ctx context.Context, in *EntityUpdateReq, opts ...client.CallOption) (*EntityUpdateRes, error) {
	req := c.c.NewRequest(c.name, "Test.EntityUpdate", in)
	out := new(EntityUpdateRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) EntityOne(ctx context.Context, in *EntityOneReq, opts ...client.CallOption) (*EntityOneRes, error) {
	req := c.c.NewRequest(c.name, "Test.EntityOne", in)
	out := new(EntityOneRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testService) EntityPage(ctx context.Context, in *EntityPageReq, opts ...client.CallOption) (*EntityPageRes, error) {
	req := c.c.NewRequest(c.name, "Test.EntityPage", in)
	out := new(EntityPageRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Test service

type TestHandler interface {
	EntityAdd(context.Context, *EntityAddReq, *EntityAddRes) error
	EntityDel(context.Context, *EntityDelReq, *EntityDelRes) error
	EntityUpdate(context.Context, *EntityUpdateReq, *EntityUpdateRes) error
	EntityOne(context.Context, *EntityOneReq, *EntityOneRes) error
	EntityPage(context.Context, *EntityPageReq, *EntityPageRes) error
}

func RegisterTestHandler(s server.Server, hdlr TestHandler, opts ...server.HandlerOption) error {
	type test interface {
		EntityAdd(ctx context.Context, in *EntityAddReq, out *EntityAddRes) error
		EntityDel(ctx context.Context, in *EntityDelReq, out *EntityDelRes) error
		EntityUpdate(ctx context.Context, in *EntityUpdateReq, out *EntityUpdateRes) error
		EntityOne(ctx context.Context, in *EntityOneReq, out *EntityOneRes) error
		EntityPage(ctx context.Context, in *EntityPageReq, out *EntityPageRes) error
	}
	type Test struct {
		test
	}
	h := &testHandler{hdlr}
	return s.Handle(s.NewHandler(&Test{h}, opts...))
}

type testHandler struct {
	TestHandler
}

func (h *testHandler) EntityAdd(ctx context.Context, in *EntityAddReq, out *EntityAddRes) error {
	return h.TestHandler.EntityAdd(ctx, in, out)
}

func (h *testHandler) EntityDel(ctx context.Context, in *EntityDelReq, out *EntityDelRes) error {
	return h.TestHandler.EntityDel(ctx, in, out)
}

func (h *testHandler) EntityUpdate(ctx context.Context, in *EntityUpdateReq, out *EntityUpdateRes) error {
	return h.TestHandler.EntityUpdate(ctx, in, out)
}

func (h *testHandler) EntityOne(ctx context.Context, in *EntityOneReq, out *EntityOneRes) error {
	return h.TestHandler.EntityOne(ctx, in, out)
}

func (h *testHandler) EntityPage(ctx context.Context, in *EntityPageReq, out *EntityPageRes) error {
	return h.TestHandler.EntityPage(ctx, in, out)
}
